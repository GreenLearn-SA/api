var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.253,1,2.215]],["body/controllers/AppController.html",[0,2.002,1,3.54,2,1.595,3,0.321,4,0.279,5,0.279,6,3.589,7,0.719,8,1.865,9,5.161,10,1.487,11,0.027,12,4.257,13,0.906,14,4.257,15,1.487,16,1.223,17,1.714,18,1.714,19,1.714,20,0.656,21,0.974,22,3.21,23,3.589,24,3.211,25,3.589,26,5.341,27,1.124,28,0.321,29,0.152,30,1.845,31,2.821,32,1.595,33,4.257,34,0.021,35,0.021]],["title/modules/AppModule.html",[36,1.253,37,2.215]],["body/modules/AppModule.html",[1,3.518,2,1.761,3,0.264,4,0.229,5,0.229,11,0.027,17,1.407,18,1.407,19,1.407,20,0.679,21,0.8,22,3.354,23,2.946,28,0.264,29,0.125,34,0.019,35,0.019,36,1.989,37,4.419,38,1.634,39,1.634,40,1.921,41,1.921,42,1.634,43,2.919,44,1.921,45,2.946,46,2.946,47,2.946,48,3.667,49,3.667,50,3.667,51,3.354,52,2.584,53,1.921,54,1.921,55,3.494,56,3.961,57,3.494,58,2.946,59,3.494,60,3.494,61,3.494,62,3.494,63,2.946,64,3.494,65,3.494,66,3.494,67,3.494,68,3.494]],["title/injectables/AppService.html",[22,1.838,69,1.015]],["body/injectables/AppService.html",[3,0.353,4,0.307,5,0.307,7,0.791,8,1.979,9,5.336,11,0.027,13,0.996,15,1.636,16,1.297,20,0.502,21,1.072,22,3.116,28,0.353,29,0.168,32,1.756,34,0.022,35,0.022,69,1.72,70,2.37,71,3.949,72,4.684,73,4.684,74,4.684,75,4.684]],["title/controllers/AuthController.html",[0,1.253,76,2.215]],["body/controllers/AuthController.html",[0,0.929,2,0.929,3,0.187,4,0.163,5,0.163,7,0.419,8,1.287,10,1.287,11,0.027,13,0.784,15,1.287,17,0.999,18,0.999,19,0.999,20,0.558,21,0.568,24,2.215,27,0.655,28,0.187,29,0.089,30,1.075,32,1.381,34,0.015,35,0.015,76,2.442,77,2.091,78,1.644,79,2.48,80,3.685,81,3.107,82,2.48,83,2.48,84,4.867,85,3.613,86,3.486,87,4.29,88,3.05,89,2.259,90,2.463,91,2.442,92,3.107,93,3.107,94,3.685,95,2.48,96,3.685,97,3.723,98,3.685,99,3.226,100,3.226,101,3.685,102,4.104,103,2.276,104,4.867,105,4.867,106,2.48,107,1.597,108,1.381,109,1.287,110,3.685,111,1.723,112,2.442,113,2.442,114,2.026,115,2.442,116,2.215,117,2.48,118,3.226,119,2.48,120,4.867,121,2.463,122,5.201,123,2.48,124,3.685,125,3.685,126,2.48,127,0.568,128,3.685,129,1.644,130,2.48,131,2.48,132,1.644,133,1.255,134,2.418,135,2.091,136,2.091,137,2.914,138,2.442,139,2.914,140,2.914,141,1.644,142,4.397,143,2.48,144,2.056,145,2.48,146,2.48,147,2.48,148,2.48,149,2.48,150,2.442,151,1.644,152,2.442,153,2.442,154,2.48,155,2.48,156,2.48,157,2.48,158,2.48,159,1.364,160,2.48,161,2.48,162,2.48,163,2.48,164,2.48,165,2.48]],["title/guards/AuthGuard.html",[166,2.473,167,2.215]],["body/guards/AuthGuard.html",[3,0.227,4,0.197,5,0.197,7,0.508,8,1.481,11,0.028,13,1.044,15,1.481,16,0.971,20,0.625,21,0.689,28,0.227,29,0.108,30,1.305,32,1.84,34,0.017,35,0.017,69,1.288,92,2.539,93,4.493,107,2.128,108,1.84,109,1.714,127,1.286,133,2.949,136,2.539,159,3.089,167,2.811,168,3.011,169,2.539,170,2.7,171,5.329,172,4.493,173,4.241,174,1.81,175,3.011,176,4.913,177,5.987,178,3.011,179,4.241,180,5.329,181,3.011,182,3.011,183,3.576,184,4.241,185,3.011,186,4.909,187,4.139,188,2.228,189,1.996,190,2.539,191,1.996,192,2.539,193,2.228,194,2.539,195,3.576,196,3.011,197,3.011,198,3.011,199,1.983,200,3.011,201,3.011,202,2.549,203,2.146,204,3.011,205,3.576,206,1.656,207,3.011,208,2.228,209,2.539,210,3.011,211,3.011,212,3.011]],["title/modules/AuthModule.html",[36,1.253,48,2.01]],["body/modules/AuthModule.html",[2,1.727,3,0.256,4,0.222,5,0.222,11,0.028,17,1.367,18,1.367,19,1.367,20,0.684,21,0.777,28,0.256,29,0.121,34,0.018,35,0.018,36,1.96,38,1.587,39,1.587,40,1.867,41,1.867,42,1.587,43,2.876,44,2.876,48,3.914,51,3.326,52,2.533,53,1.867,54,1.867,56,3.885,58,2.862,76,3.466,134,3.608,135,2.862,167,3.053,188,2.511,189,2.25,191,2.25,192,2.862,199,1.587,208,2.511,209,2.862,213,2.862,214,2.862,215,2.862,216,3.394,217,2.112,218,3.394,219,4.607,220,3.394,221,3.394,222,3.394,223,1.587,224,3.394,225,3.394,226,3.394,227,3.394,228,3.394,229,3.394,230,3.394]],["title/injectables/AuthService.html",[69,1.015,134,1.838]],["body/injectables/AuthService.html",[3,0.245,4,0.213,5,0.213,7,0.547,8,1.559,11,0.027,13,0.95,15,1.132,16,1.365,20,0.619,21,0.742,28,0.245,29,0.116,32,1.215,34,0.018,35,0.018,69,1.356,70,1.641,81,3.765,103,1.516,107,1.935,108,1.674,109,1.559,111,1.516,112,2.149,113,2.149,114,3.026,115,2.149,116,1.949,127,1.022,134,2.456,144,1.516,159,3.026,170,2.809,172,4.306,174,2.685,176,5.153,187,2.734,189,2.149,202,2.685,203,2.259,205,2.734,206,3.026,217,1.922,223,1.516,231,2.734,232,3.243,233,3.018,234,2.809,235,3.243,236,4.465,237,5.503,238,3.243,239,2.149,240,2.149,241,3.243,242,3.304,243,3.243,244,3.304,245,2.734,246,2.734,247,3.243,248,4.465,249,3.243,250,3.243,251,3.243,252,3.243,253,3.243,254,3.243,255,3.243,256,3.243,257,3.243,258,3.243]],["title/classes/Content.html",[29,0.12,259,1.838]],["body/classes/Content.html",[3,0.39,4,0.339,5,0.339,11,0.025,28,0.39,29,0.185,34,0.024,35,0.024,259,3.302,260,1.569,261,4.355]],["title/controllers/ContentController.html",[0,1.253,262,2.215]],["body/controllers/ContentController.html",[0,0.568,2,0.568,3,0.114,4,0.099,5,0.099,7,0.256,8,0.874,10,1.434,11,0.027,13,0.874,15,1.434,16,1.16,17,0.611,18,0.611,19,0.611,20,0.524,21,0.347,27,0.4,28,0.114,29,0.054,30,0.657,31,1.005,32,1.539,34,0.01,35,0.01,78,1.005,85,3.461,86,2.658,87,4.188,89,2.468,90,2.474,91,2.459,97,3.452,99,3.461,100,3.461,103,2.067,107,1.78,108,2.05,109,1.434,121,1.266,127,1.428,129,1.659,132,1.005,133,0.767,137,2.93,138,1.659,139,2.722,140,2.93,141,1.005,150,2.722,151,1.005,152,3.241,153,3.461,259,0.834,262,1.659,263,1.278,264,1.085,265,1.376,266,1.376,267,2.431,268,1.758,269,1.278,270,2.431,271,3.038,272,2.745,273,4.78,274,1.852,275,1.122,276,1.852,277,1.278,278,2.745,279,2.745,280,2.474,281,2.04,282,2.04,283,1.852,284,1.278,285,1.516,286,0.834,287,1.385,288,3.618,289,3.128,290,3.128,291,4.889,292,1.852,293,1.122,294,2.04,295,2.365,296,1.852,297,2.11,298,1.852,299,1.122,300,1.278,301,1.122,302,1.516,303,1.005,304,3.128,305,2.11,306,1.122,307,3.271,308,3.728,309,1.852,310,1.278,311,1.516,312,1.005,313,1.852,314,1.852,315,1.852,316,1.278,317,1.278,318,1.278,319,1.516,320,1.005,321,2.939,322,2.745,323,1.852,324,1.122,325,1.122,326,1.278,327,1.516,328,1.122,329,1.122,330,1.122,331,1.758,332,1.278,333,2.365,334,1.852,335,2.745,336,1.852,337,2.431,338,1.122,339,2.365,340,1.758,341,1.122,342,2.04,343,1.122,344,0.911,345,0.834,346,1.852,347,0.834,348,1.516,349,1.516,350,1.278,351,1.122,352,1.122,353,1.516,354,0.834,355,0.767,356,1.278,357,1.122,358,1.122,359,1.516,360,1.122,361,1.278,362,1.278,363,1.516,364,1.122,365,1.278,366,1.516,367,1.516,368,1.278,369,1.278,370,1.278,371,1.278,372,1.516]],["title/modules/ContentModule.html",[36,1.253,49,2.01]],["body/modules/ContentModule.html",[2,1.92,3,0.301,4,0.261,5,0.261,11,0.027,17,1.605,18,1.605,19,1.605,20,0.641,21,0.912,28,0.301,29,0.142,34,0.02,35,0.02,36,2.122,38,1.863,39,1.863,40,2.191,41,2.191,42,1.863,43,3.113,44,3.113,49,3.958,52,2.816,53,2.191,54,2.191,217,2.209,223,1.863,262,3.752,331,3.696,332,3.359,373,3.359,374,3.359,375,3.359,376,3.984,377,3.984]],["title/injectables/ContentService.html",[69,1.015,331,1.838]],["body/injectables/ContentService.html",[3,0.163,4,0.142,5,0.142,7,0.365,8,1.159,11,0.028,13,1.1,15,1.71,16,1.305,20,0.487,21,0.494,28,0.163,29,0.077,30,0.936,32,1.836,34,0.013,35,0.013,69,1.008,70,1.093,90,1.093,103,2.122,107,2.241,108,2.408,109,1.806,111,2.418,121,1.093,127,1.183,159,2.843,170,3.304,174,1.299,199,2.599,202,2.944,203,2.478,206,3.134,217,1.585,223,1.01,234,1.826,239,2.2,240,1.432,259,1.826,264,1.439,265,1.826,266,1.826,267,1.826,268,1.826,269,2.799,270,2.843,273,1.598,280,1.093,281,1.188,282,2.693,286,1.826,287,1.753,294,2.495,303,2.2,312,2.2,320,2.2,321,3.341,331,1.826,345,1.188,346,2.456,347,1.188,355,1.68,378,1.821,379,1.598,380,2.16,381,2.16,382,2.16,383,2.16,384,2.16,385,2.16,386,2.456,387,5.17,388,2.16,389,3.32,390,3.826,391,2.799,392,2.16,393,2.799,394,2.2,395,2.2,396,2.16,397,2.456,398,1.432,399,4.043,400,3.358,401,2.456,402,2.992,403,1.598,404,4.043,405,3.32,406,2.16,407,2.16,408,2.16]],["title/classes/CreateContentDto.html",[29,0.12,270,1.838]],["body/classes/CreateContentDto.html",[3,0.216,4,0.188,5,0.188,7,0.484,10,1.925,11,0.027,13,1.173,16,1.482,20,0.439,27,0.757,28,0.216,29,0.146,34,0.016,35,0.016,89,2.212,97,2.462,108,1.791,109,1.43,111,2.578,127,1.471,199,2.578,260,0.87,270,2.252,273,4.242,280,2.072,354,2.252,394,2.714,395,2.714,409,4.834,410,2.12,411,1.775,412,4.777,413,4.777,414,4.395,415,3.454,416,3.628,417,2.866,418,2.866,419,4.094,420,5.212,421,3.856,422,4.777,423,4.094,424,4.094,425,4.094,426,4.094,427,4.094,428,4.094,429,4.094,430,4.834,431,2.866,432,2.866,433,3.452,434,3.452,435,3.452,436,3.452,437,3.452,438,2.416,439,2.866,440,2.12,441,2.866,442,2.866,443,2.866,444,2.79,445,3.452,446,3.454,447,3.03,448,3.654,449,1.899,450,3.452]],["title/classes/CreateDisciplineDto.html",[29,0.12,451,1.838]],["body/classes/CreateDisciplineDto.html",[3,0.271,4,0.235,5,0.235,7,0.606,10,1.879,11,0.027,13,1.145,16,1.492,20,0.513,27,0.948,28,0.271,29,0.171,34,0.019,35,0.019,88,2.421,89,1.793,108,2.017,109,1.671,111,2.795,127,1.436,199,1.679,260,1.09,280,2.421,394,3.171,411,2.074,415,3.171,416,3.45,430,4.034,433,4.034,434,4.034,435,4.034,436,4.034,437,4.034,438,3.027,440,2.656,444,2.723,446,3.566,447,3.54,448,3.803,449,2.379,451,2.631,452,4.838,453,2.656,454,5.38,455,3.59,456,4.784,457,3.59,458,3.59,459,4.784,460,3.59,461,3.59]],["title/classes/CreateUserDto.html",[29,0.12,462,1.838]],["body/classes/CreateUserDto.html",[3,0.203,4,0.177,5,0.177,7,0.455,10,2.023,11,0.027,13,1.233,16,1.526,20,0.42,27,0.711,28,0.203,29,0.14,34,0.016,35,0.016,86,2.355,88,3.186,89,2.104,102,3.302,109,1.368,111,2.158,112,3.058,113,3.058,114,2.538,115,3.058,116,2.774,127,1.509,260,0.818,280,2.563,354,2.154,411,1.698,414,4.271,415,3.721,416,3.786,421,2.898,440,1.994,444,2.932,445,3.302,446,3.721,447,3.414,448,3.567,449,1.786,450,3.891,462,2.154,463,5.005,464,1.994,465,4.614,466,2.898,467,2.694,468,2.694,469,3.916,470,2.694,471,2.694,472,2.694,473,3.916,474,2.694,475,2.694,476,3.916,477,2.694,478,2.694,479,3.302,480,2.272,481,2.694,482,3.302,483,2.272,484,2.694,485,3.916,486,3.302,487,2.694,488,2.694,489,2.272,490,2.694,491,2.272]],["title/classes/Discipline.html",[29,0.12,492,2.01]],["body/classes/Discipline.html",[3,0.39,4,0.339,5,0.339,11,0.025,28,0.39,29,0.185,34,0.024,35,0.024,260,1.569,492,3.61,493,4.355]],["title/controllers/DisciplineController.html",[0,1.253,494,2.215]],["body/controllers/DisciplineController.html",[0,0.566,2,0.566,3,0.114,4,0.099,5,0.099,7,0.255,8,0.871,10,1.431,11,0.027,13,0.872,15,1.431,16,1.159,17,0.608,18,0.608,19,0.608,20,0.524,21,0.346,27,0.399,28,0.114,29,0.054,30,0.655,31,1.001,32,1.536,34,0.01,35,0.01,78,1.001,85,3.457,86,2.653,89,2.467,90,2.471,91,2.454,97,3.448,99,3.457,100,3.457,103,2.064,107,1.777,108,2.048,109,1.431,121,1.263,127,1.427,129,1.654,132,1.001,133,0.764,137,2.925,138,1.654,139,2.716,140,2.925,141,1.001,150,2.716,151,1.001,152,3.236,153,3.457,264,1.082,265,1.372,266,1.372,267,2.427,268,1.372,271,3.033,272,2.739,274,1.846,275,1.118,276,1.846,278,2.739,279,2.739,280,2.471,281,2.036,282,2.036,283,1.846,284,1.274,286,0.831,287,1.382,288,3.613,292,1.846,293,1.118,294,2.036,295,2.359,296,1.846,298,1.846,299,1.118,301,1.118,303,1.001,305,2.104,306,1.118,307,3.266,309,1.846,310,1.274,312,1.001,313,1.846,314,1.846,315,1.846,316,1.274,318,1.274,320,1.001,322,2.739,323,1.846,324,1.118,325,1.118,326,1.274,328,1.118,329,1.118,330,1.118,333,2.359,334,1.846,335,2.739,336,1.846,337,2.427,338,1.118,339,2.359,340,1.753,341,1.118,342,2.036,343,1.118,344,0.908,345,0.831,347,0.831,351,1.118,352,1.118,354,0.831,355,0.764,357,1.118,358,1.118,360,1.846,361,1.274,362,1.274,364,1.118,365,1.274,368,1.274,370,1.274,371,1.274,394,3.236,395,4.28,451,2.427,492,0.908,494,1.654,495,1.274,496,1.274,497,5.655,498,1.511,499,1.511,500,3.702,501,4.882,502,2.495,503,1.511,504,1.511,505,3.702,506,4.413,507,1.511,508,1.511,509,1.511,510,2.935,511,1.511,512,1.753,513,1.274,514,1.846,515,1.511,516,1.511,517,1.511,518,1.511,519,1.511,520,1.511,521,1.511,522,1.511,523,1.511,524,1.511]],["title/modules/DisciplineModule.html",[36,1.253,50,2.01]],["body/modules/DisciplineModule.html",[2,1.916,3,0.3,4,0.26,5,0.26,11,0.027,17,1.6,18,1.6,19,1.6,20,0.64,21,0.909,28,0.3,29,0.142,34,0.02,35,0.02,36,2.118,38,1.857,39,1.857,40,2.184,41,2.184,42,1.857,43,3.108,44,3.108,50,3.956,52,2.811,53,2.184,54,2.184,217,2.207,223,1.857,494,3.746,512,3.694,513,3.349,525,3.349,526,3.349,527,3.349,528,3.972,529,3.972]],["title/injectables/DisciplineService.html",[69,1.015,512,1.838]],["body/injectables/DisciplineService.html",[3,0.148,4,0.129,5,0.129,7,0.332,8,1.077,11,0.028,13,1.058,15,1.637,16,1.268,20,0.462,21,0.45,28,0.148,29,0.07,30,0.852,32,1.757,34,0.012,35,0.012,69,0.937,70,0.994,88,1.561,89,1.427,90,1.561,103,2.017,107,2.156,108,2.429,109,1.737,111,2.326,121,1.561,127,1.138,159,2.86,170,3.229,174,1.181,199,2.849,202,2.99,203,2.517,206,3.117,217,1.506,223,0.919,234,1.696,239,2.044,240,1.302,244,3.191,259,2.372,264,1.337,265,1.696,266,1.696,267,1.696,268,1.696,280,1.561,281,1.696,282,2.735,286,1.696,287,1.65,294,2.372,303,2.044,312,2.044,320,2.044,345,1.081,347,1.081,355,1.561,379,1.454,386,2.817,390,4.541,391,3.211,393,2.601,395,2.044,397,2.282,398,1.302,400,3.985,401,2.282,402,2.817,403,1.454,451,2.735,492,1.854,496,2.601,510,3.238,512,1.696,514,2.282,530,1.657,531,1.965,532,1.965,533,1.965,534,1.965,535,1.965,536,1.965,537,3.084,538,3.084,539,2.601,540,1.965,541,1.965,542,3.808,543,3.084,544,1.965,545,3.084,546,1.965,547,1.965]],["title/injectables/PrismaService.html",[69,1.015,217,1.167]],["body/injectables/PrismaService.html",[3,0.342,4,0.297,5,0.297,7,0.766,8,1.941,11,0.027,13,0.965,15,1.585,20,0.596,21,1.039,28,0.342,29,0.162,34,0.022,35,0.022,69,1.688,70,2.296,170,3.303,194,3.826,206,2.495,217,1.941,548,3.826,549,3.683,550,5.065,551,6.536,552,4.537,553,4.537,554,4.537]],["title/classes/SingInUserDto.html",[29,0.12,118,2.215]],["body/classes/SingInUserDto.html",[3,0.295,4,0.256,5,0.256,7,0.661,10,1.768,11,0.027,13,1.077,16,1.486,20,0.543,27,1.033,28,0.295,29,0.181,34,0.02,35,0.02,88,3.002,89,1.897,114,3.086,116,3.374,118,3.355,127,1.441,144,2.624,260,1.188,411,2.194,415,3.355,416,3.567,444,2.84,446,3.719,448,3.355,449,2.593,479,4.268,480,3.299,482,4.268,483,3.299,486,4.268,489,3.299,491,3.299,555,4.732,556,3.299,557,3.912,558,3.912]],["title/classes/SwaggerBadRequestResponse.html",[29,0.12,337,1.838]],["body/classes/SwaggerBadRequestResponse.html",[3,0.319,4,0.277,5,0.277,7,0.714,10,2.032,11,0.027,13,1.238,16,1.398,20,0.453,27,1.117,28,0.319,29,0.151,34,0.021,35,0.021,127,1.332,133,3.09,260,1.284,287,2.306,337,2.925,411,2.306,444,3.299,559,5.149,560,2.803,561,4.306,562,4.306,563,4.306,564,3.129,565,3.129,566,3.129]],["title/classes/SwaggerConflictResponse.html",[29,0.12,340,1.838]],["body/classes/SwaggerConflictResponse.html",[3,0.323,4,0.281,5,0.281,7,0.723,10,2.045,11,0.027,13,1.246,16,1.404,20,0.459,27,1.131,28,0.323,29,0.153,34,0.021,35,0.021,127,1.34,260,1.301,287,2.325,340,2.949,411,2.325,444,3.309,560,2.84,561,4.332,562,4.332,563,4.332,564,3.17,565,3.17,566,3.17,567,5.174]],["title/classes/SwaggerNotFoundResponse.html",[29,0.12,342,1.838]],["body/classes/SwaggerNotFoundResponse.html",[3,0.319,4,0.277,5,0.277,7,0.714,10,2.032,11,0.027,13,1.238,16,1.398,20,0.453,27,1.117,28,0.319,29,0.151,34,0.021,35,0.021,127,1.332,260,1.284,287,2.306,342,2.925,344,3.672,411,2.306,444,3.299,560,2.803,561,4.306,562,4.306,563,4.306,564,3.129,565,3.129,566,3.129,568,5.149]],["title/classes/UpdateContentDto.html",[29,0.12,321,2.01]],["body/classes/UpdateContentDto.html",[3,0.367,4,0.318,5,0.318,11,0.027,20,0.621,27,1.283,28,0.367,29,0.174,34,0.023,35,0.023,260,1.475,264,2.106,270,2.672,321,3.482,346,3.594,410,3.594,549,3.838,569,4.096,570,5.791,571,3.594]],["title/classes/UpdateDisciplineDto.html",[29,0.12,510,2.01]],["body/classes/UpdateDisciplineDto.html",[3,0.365,4,0.317,5,0.317,11,0.027,20,0.62,27,1.278,28,0.365,29,0.173,34,0.023,35,0.023,260,1.47,264,2.098,451,2.662,453,3.581,510,3.474,514,3.581,549,3.83,571,3.581,572,4.081,573,5.778]],["title/classes/UpdateUserDto.html",[29,0.12,574,2.01]],["body/classes/UpdateUserDto.html",[3,0.367,4,0.318,5,0.318,11,0.027,20,0.621,27,1.283,28,0.367,29,0.174,34,0.023,35,0.023,260,1.475,264,2.106,462,2.672,464,3.594,549,3.838,571,3.594,574,3.482,575,4.096,576,5.791,577,3.594]],["title/classes/User.html",[29,0.12,144,1.563]],["body/classes/User.html",[3,0.39,4,0.339,5,0.339,11,0.025,28,0.39,29,0.185,34,0.024,35,0.024,144,2.807,260,1.569,578,4.355]],["title/controllers/UserController.html",[0,1.253,579,2.215]],["body/controllers/UserController.html",[0,0.563,2,0.563,3,0.113,4,0.098,5,0.098,7,0.254,8,0.867,10,1.427,11,0.027,13,0.869,15,1.427,16,1.156,17,0.605,18,0.605,19,0.605,20,0.542,21,0.344,24,1.493,25,1.267,27,0.397,28,0.113,29,0.054,30,0.651,31,0.996,32,1.531,34,0.01,35,0.01,78,0.996,85,3.45,86,2.646,87,4.178,88,3.265,89,2.465,90,2.465,91,2.445,97,3.443,99,3.45,100,3.45,103,2.058,107,1.771,108,1.65,109,1.427,114,2.999,121,1.257,127,1.426,129,1.646,132,0.996,133,0.76,137,2.917,138,1.646,139,2.708,140,2.917,141,0.996,144,0.702,150,2.708,151,0.996,152,3.229,153,3.45,233,1.607,264,1.077,265,1.366,266,1.366,267,2.42,268,1.746,271,2.73,272,2.73,274,1.838,275,1.111,276,1.838,277,1.267,278,2.73,279,3.023,281,2.029,282,2.029,283,1.838,286,0.826,287,1.376,288,3.604,289,3.111,290,3.111,292,1.838,293,1.111,294,2.029,295,2.35,296,1.838,297,2.094,298,1.838,299,1.111,300,1.267,301,1.111,304,3.111,306,1.111,307,3.256,308,3.711,309,1.838,313,1.838,314,1.838,315,1.838,317,1.267,322,2.73,323,1.838,324,1.111,325,1.111,328,1.111,329,1.111,330,1.111,333,2.35,334,1.838,335,2.73,336,1.838,337,2.562,338,1.111,339,2.35,340,1.746,341,1.111,342,2.029,343,1.111,344,0.903,345,0.826,347,0.826,350,1.267,351,1.111,352,1.111,354,0.826,355,0.76,356,1.267,357,1.111,358,1.111,360,1.111,364,1.111,369,1.267,462,2.42,466,1.838,574,2.929,577,1.838,579,1.646,580,1.267,581,1.267,582,1.502,583,2.484,584,1.502,585,4.871,586,1.502,587,1.267,588,2.484,589,1.502,590,1.502,591,1.267,592,1.502,593,1.502,594,1.502,595,1.267,596,1.502,597,1.502,598,1.267,599,1.502,600,1.502,601,1.502,602,1.502,603,1.502,604,1.502,605,1.502,606,1.502,607,1.502,608,1.502,609,1.502,610,1.502,611,1.502]],["title/modules/UserModule.html",[36,1.253,51,1.838]],["body/modules/UserModule.html",[2,1.92,3,0.301,4,0.261,5,0.261,11,0.027,17,1.605,18,1.605,19,1.605,20,0.641,21,0.912,28,0.301,29,0.142,34,0.02,35,0.02,36,2.122,38,1.863,39,1.863,40,2.191,41,2.191,42,1.863,43,3.113,44,3.113,51,3.62,52,2.816,53,2.191,54,2.191,217,2.209,223,1.863,233,3.401,579,3.752,598,3.359,612,3.359,613,3.359,614,3.359,615,3.984,616,3.984]],["title/injectables/UserService.html",[69,1.015,233,1.691]],["body/injectables/UserService.html",[3,0.135,4,0.117,5,0.117,7,0.302,8,0.999,11,0.028,13,1.066,15,1.667,16,1.312,20,0.48,21,0.409,28,0.135,29,0.064,30,0.775,32,1.789,34,0.011,35,0.011,69,0.869,70,0.905,88,1.811,90,1.811,103,1.338,107,2.173,108,2.109,109,1.751,111,1.913,112,2.711,113,2.711,114,3.426,115,2.966,116,1.72,121,1.811,127,1.147,144,1.338,159,3.03,170,3.283,174,1.075,183,2.413,199,2.978,202,2.69,203,2.264,206,3.201,217,1.428,223,0.836,233,1.448,234,1.574,239,1.897,240,1.185,242,2.117,244,3.532,245,3.449,246,2.413,264,1.24,265,1.574,266,1.574,267,1.574,268,1.574,281,1.968,282,2.461,286,1.574,287,1.551,294,2.249,345,0.983,347,0.983,355,1.448,379,1.323,386,3.027,397,2.117,398,1.185,400,3.854,401,2.117,402,2.648,403,1.323,421,1.323,462,2.625,466,1.323,539,3.017,574,3.131,577,2.117,581,2.413,587,2.413,591,2.413,595,2.413,617,1.507,618,2.862,619,1.788,620,1.788,621,1.788,622,2.862,623,1.788,624,1.788,625,1.788,626,1.788,627,2.862,628,4.09,629,2.862,630,4.09,631,2.862,632,4.09,633,1.788,634,1.788,635,3.578,636,4.09,637,2.862,638,1.788,639,1.788,640,1.788]],["title/coverage.html",[641,3.373]],["body/coverage.html",[0,2.065,1,1.895,5,0.187,6,2.411,11,0.027,22,1.573,24,1.719,29,0.23,34,0.016,35,0.016,42,1.337,69,1.74,71,2.411,76,1.895,77,2.411,118,1.895,127,0.655,133,1.447,134,1.573,144,1.912,166,2.116,167,1.895,169,2.411,191,1.895,193,2.116,203,1.447,217,0.999,231,2.411,233,1.447,234,2.248,259,1.573,261,2.411,262,1.895,263,2.411,270,1.573,321,1.719,331,1.573,337,1.573,340,1.573,342,1.573,344,1.719,378,2.411,398,4.537,409,2.411,410,3.025,451,1.573,452,2.411,453,3.025,462,1.573,463,2.411,464,3.025,492,1.719,493,2.411,494,1.895,495,2.411,510,1.719,512,1.573,530,2.411,548,2.411,555,2.411,556,2.411,559,2.411,560,3.163,567,2.411,568,2.411,569,2.411,572,2.411,574,1.719,575,2.411,578,2.411,579,1.895,580,2.411,617,2.411,641,2.116,642,2.859,643,2.859,644,2.859,645,3.025,646,4.088,647,2.411,648,6.423,649,5.508,650,4.771,651,4.771,652,5.508,653,2.411,654,3.447,655,2.411,656,2.411,657,5.207,658,4.088,659,4.088,660,2.859,661,2.859]],["title/dependencies.html",[39,1.879,662,2.355]],["body/dependencies.html",[11,0.027,21,1.061,27,1.223,34,0.022,35,0.022,39,2.167,63,3.907,188,3.429,189,3.071,190,3.907,242,3.429,663,6.063,664,4.634,665,4.634,666,4.634,667,4.634,668,4.634,669,4.634,670,4.634,671,4.634,672,4.634,673,4.634,674,4.634,675,4.634,676,4.634,677,4.634,678,4.634,679,4.634]],["title/miscellaneous/functions.html",[680,1.851,681,3.389]],["body/miscellaneous/functions.html",[7,0.862,11,0.024,34,0.024,35,0.024,42,2.954,645,3.777,647,5.326,656,4.304,680,3.383,681,4.304,682,5.104,683,4.304]],["title/index.html",[7,0.471,684,2.793,685,2.793]],["body/index.html",[4,0.253,11,0.027,34,0.02,35,0.02,89,1.449,416,3.354,641,2.861,686,3.866,687,3.866,688,5.023,689,3.866,690,3.866,691,3.866,692,3.866,693,3.866,694,3.866,695,5.58,696,3.866,697,3.866,698,3.866,699,3.866,700,6.388,701,3.866,702,3.866,703,3.866,704,6.275,705,3.866,706,3.866,707,5.023,708,3.866,709,3.866,710,3.866,711,3.866,712,5.023,713,5.023,714,3.866,715,3.866,716,3.866,717,5.023,718,5.023,719,3.866,720,3.866,721,3.866,722,3.866,723,3.866,724,3.26,725,3.866,726,3.866,727,3.866,728,3.866,729,3.866,730,3.866,731,3.866,732,3.866,733,3.866,734,3.866,735,3.26,736,3.866,737,3.866,738,3.866,739,3.866,740,3.866,741,3.866,742,3.26]],["title/modules.html",[38,2.132]],["body/modules.html",[11,0.023,34,0.023,35,0.023,37,3.22,38,2.272,48,2.921,49,2.921,50,2.921,51,2.672,724,5.519,743,6.545,744,6.545,745,6.545]],["title/overview.html",[746,3.844]],["body/overview.html",[2,1.282,11,0.027,22,2.888,34,0.018,35,0.018,36,1.282,37,4.353,38,1.6,39,1.6,40,1.881,41,1.881,42,1.6,43,1.881,44,1.881,45,2.884,46,2.884,47,2.884,48,3.884,49,3.79,50,3.79,51,3.514,52,2.547,53,1.881,54,1.881,70,1.731,134,3.409,166,2.531,213,2.884,214,2.884,215,2.884,217,2.117,233,3.136,260,1.039,331,3.409,355,1.731,373,2.884,374,2.884,375,2.884,512,3.409,525,2.884,526,2.884,527,2.884,612,2.884,613,2.884,614,2.884,746,2.884,747,4.631,748,3.421,749,3.421]],["title/properties.html",[411,1.742,662,2.355]],["body/properties.html",[11,0.027,34,0.024,35,0.024,89,1.928,411,2.23,735,4.338,742,4.338,750,5.145,751,5.145,752,5.145]],["title/miscellaneous/variables.html",[680,1.851,753,3.389]],["body/miscellaneous/variables.html",[7,0.75,11,0.027,16,1.017,24,3.299,34,0.022,35,0.022,127,1.256,191,3.637,193,4.06,195,3.748,199,2.078,203,2.249,208,3.289,234,3.418,354,3.418,550,3.748,645,3.289,653,3.748,654,3.748,655,3.748,680,2.946,683,3.748,753,3.748,754,5.487,755,4.445,756,4.445,757,6.216,758,4.445,759,4.445,760,4.445]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":751,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0242ac120002",{"_index":437,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["1",{"_index":355,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["10",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["10.0.0",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["11ee",{"_index":435,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["123",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":749,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["20",{"_index":402,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["200",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["200})@apibadrequestresponse({description",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":276,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["400",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["400})@apiunauthorizedresponse({description",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["401",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":307,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["409",{"_index":278,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["442c",{"_index":434,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["5",{"_index":747,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":748,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["7.1.0",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["7.1.8",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["acessa",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["acesso",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["amazing",{"_index":725,"title":{},"body":{"index.html":{}}}],["ao",{"_index":314,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apelido",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["apibadrequestresponse",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apibearerauth",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apiconflictresponse",{"_index":333,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse",{"_index":334,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apiexcludeendpoint",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["apiexcludeendpoint()@public()@get",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["apinotfoundresponse",{"_index":335,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apiokresponse",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":271,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":336,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":444,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["apiproperty({description",{"_index":415,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conteúdo",{"_index":348,"title":{},"body":{"controllers/ContentController.html":{}}}],["apitags('disciplina",{"_index":515,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["apitags('usuário",{"_index":599,"title":{},"body":{"controllers/UserController.html":{}}}],["apiunauthorizedresponse",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":702,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":694,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":37,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archiver",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["async",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["atualiza",{"_index":322,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["atualizadas",{"_index":364,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["atualizadas'})@apinotfoundresponse({status",{"_index":324,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["auth",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/public.decorator",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{}}}],["authcontroller",{"_index":76,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":167,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":48,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":735,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":134,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autorizado",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["await",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":726,"title":{},"body":{"index.html":{}}}],["base",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["bcrypt",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["be56",{"_index":436,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["bearer",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":414,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateUserDto.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":745,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":743,"title":{},"body":{"modules.html":{}}}],["building",{"_index":689,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":211,"title":{},"body":{"guards/AuthGuard.html":{}}}],["checkhealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["class",{"_index":29,"title":{"classes/Content.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["classes",{"_index":260,"title":{},"body":{"classes/Content.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contentmodule",{"_index":373,"title":{},"body":{"modules/ContentModule.html":{},"overview.html":{}}}],["cluster_contentmodule_exports",{"_index":374,"title":{},"body":{"modules/ContentModule.html":{},"overview.html":{}}}],["cluster_contentmodule_providers",{"_index":375,"title":{},"body":{"modules/ContentModule.html":{},"overview.html":{}}}],["cluster_disciplinemodule",{"_index":525,"title":{},"body":{"modules/DisciplineModule.html":{},"overview.html":{}}}],["cluster_disciplinemodule_exports",{"_index":526,"title":{},"body":{"modules/DisciplineModule.html":{},"overview.html":{}}}],["cluster_disciplinemodule_providers",{"_index":527,"title":{},"body":{"modules/DisciplineModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":612,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":614,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":613,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["com",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["completed",{"_index":412,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["conflictexception",{"_index":386,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["conflictexception('id",{"_index":393,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{}}}],["const",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["constants",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["constructor",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["constructor(jwtservice",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(prisma",{"_index":379,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":259,"title":{"classes/Content.html":{}},"body":{"classes/Content.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"coverage.html":{}}}],["content.controller",{"_index":377,"title":{},"body":{"modules/ContentModule.html":{}}}],["content.dto",{"_index":346,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/UpdateContentDto.html":{}}}],["content.dto.ts",{"_index":410,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/UpdateContentDto.html":{},"coverage.html":{}}}],["content.dto.ts:18",{"_index":443,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["content.dto.ts:28",{"_index":432,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["content.dto.ts:38",{"_index":418,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["content.dto.ts:48",{"_index":439,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["content.dto.ts:8",{"_index":441,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["content.service",{"_index":332,"title":{},"body":{"controllers/ContentController.html":{},"modules/ContentModule.html":{}}}],["contentcontroller",{"_index":262,"title":{"controllers/ContentController.html":{}},"body":{"controllers/ContentController.html":{},"modules/ContentModule.html":{},"coverage.html":{}}}],["contentexists",{"_index":387,"title":{},"body":{"injectables/ContentService.html":{}}}],["contentmodule",{"_index":49,"title":{"modules/ContentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContentModule.html":{},"modules.html":{},"overview.html":{}}}],["contentservice",{"_index":331,"title":{"injectables/ContentService.html":{}},"body":{"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"coverage.html":{},"overview.html":{}}}],["context",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{}}}],["conteúdo",{"_index":273,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{}}}],["conteúdos",{"_index":291,"title":{},"body":{"controllers/ContentController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('content",{"_index":349,"title":{},"body":{"controllers/ContentController.html":{}}}],["controller('discipline",{"_index":516,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["controller('user",{"_index":600,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":641,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":264,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":352,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["create(createcontentdto",{"_index":269,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{}}}],["create(createdisciplinedto",{"_index":496,"title":{},"body":{"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["create(createuserdto",{"_index":581,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createcontentdto",{"_index":270,"title":{"classes/CreateContentDto.html":{}},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/UpdateContentDto.html":{},"coverage.html":{}}}],["createcontentdto.disciplineid",{"_index":392,"title":{},"body":{"injectables/ContentService.html":{}}}],["createcontentdto.name",{"_index":389,"title":{},"body":{"injectables/ContentService.html":{}}}],["createdisciplinedto",{"_index":451,"title":{"classes/CreateDisciplineDto.html":{}},"body":{"classes/CreateDisciplineDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/UpdateDisciplineDto.html":{},"coverage.html":{}}}],["createdisciplinedto.name",{"_index":538,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["createdisciplinedto.userid",{"_index":540,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["createuserdto",{"_index":462,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.username",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["cria",{"_index":272,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["criada",{"_index":517,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["criada'})@apiconflictresponse({status",{"_index":498,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["criado",{"_index":350,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["criado'})@apiconflictresponse({status",{"_index":277,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["d5d7318e",{"_index":433,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["da",{"_index":394,"title":{},"body":{"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"controllers/DisciplineController.html":{}}}],["das",{"_index":502,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["data",{"_index":397,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["database/prismaservice",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["de",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContentController.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{}}}],["decorators/public.decorator",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["default",{"_index":354,"title":{},"body":{"controllers/ContentController.html":{},"classes/CreateContentDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":328,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["delete('remove/:name",{"_index":370,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["delete('remove/:username",{"_index":609,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/SingInUserDto.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["descrição",{"_index":419,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["development",{"_index":703,"title":{},"body":{"index.html":{}}}],["disable",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["disciplina",{"_index":395,"title":{},"body":{"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["disciplinas",{"_index":501,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["discipline",{"_index":492,"title":{"classes/Discipline.html":{}},"body":{"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"coverage.html":{}}}],["discipline.controller",{"_index":529,"title":{},"body":{"modules/DisciplineModule.html":{}}}],["discipline.dto",{"_index":514,"title":{},"body":{"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/UpdateDisciplineDto.html":{}}}],["discipline.dto.ts",{"_index":453,"title":{},"body":{"classes/CreateDisciplineDto.html":{},"classes/UpdateDisciplineDto.html":{},"coverage.html":{}}}],["discipline.dto.ts:13",{"_index":458,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["discipline.dto.ts:18",{"_index":460,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["discipline.dto.ts:8",{"_index":455,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["discipline.service",{"_index":513,"title":{},"body":{"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{}}}],["disciplinecontroller",{"_index":494,"title":{"controllers/DisciplineController.html":{}},"body":{"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"coverage.html":{}}}],["disciplineexists",{"_index":390,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{}}}],["disciplineid",{"_index":413,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["disciplinemodule",{"_index":50,"title":{"modules/DisciplineModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DisciplineModule.html":{},"modules.html":{},"overview.html":{}}}],["disciplines",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["disciplineservice",{"_index":512,"title":{"injectables/DisciplineService.html":{}},"body":{"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["dos",{"_index":297,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto.ts",{"_index":556,"title":{},"body":{"classes/SingInUserDto.html":{},"coverage.html":{}}}],["dto.ts:14",{"_index":557,"title":{},"body":{"classes/SingInUserDto.html":{}}}],["dto.ts:9",{"_index":558,"title":{},"body":{"classes/SingInUserDto.html":{}}}],["dto/create",{"_index":345,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":347,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":421,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":714,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":690,"title":{},"body":{"index.html":{}}}],["em",{"_index":425,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["email",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["encontrada",{"_index":506,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["encontradas",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["encontrado",{"_index":308,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["envolvem",{"_index":428,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["error",{"_index":561,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["eslint",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["específica",{"_index":505,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["específico",{"_index":304,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["example",{"_index":416,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["existe",{"_index":282,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["existente",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":549,"title":{},"body":{"injectables/PrismaService.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{}}}],["extracttokenfromheader",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{}}}],["false",{"_index":450,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateUserDto.html":{}}}],["false})@isboolean()@isnotempty",{"_index":417,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["false})@isstring",{"_index":431,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":265,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@param('page",{"_index":358,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["findall(page",{"_index":286,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findinfos",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["findinfos(username",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":266,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('name",{"_index":362,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["findone(@param('username",{"_index":604,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(name",{"_index":303,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["findone(username",{"_index":587,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["firstname",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["found",{"_index":344,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["framework",{"_index":688,"title":{},"body":{"index.html":{}}}],["function",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":681,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:name",{"_index":361,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["get('/:username",{"_index":603,"title":{},"body":{"controllers/UserController.html":{}}}],["get('findall/:page",{"_index":357,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["get('profile",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apioperation({summary",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":684,"title":{"index.html":{}},"body":{}}],["global",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["grandezas",{"_index":429,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["grow",{"_index":721,"title":{},"body":{"index.html":{}}}],["guard",{"_index":166,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hash",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["helmet",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["helpers/bad",{"_index":338,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["helpers/conflict",{"_index":341,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["helpers/not",{"_index":343,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["here",{"_index":732,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":739,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["hábito",{"_index":459,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["id",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["incorreta",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["informações",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":699,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":701,"title":{},"body":{"index.html":{}}}],["inválida",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["is_public_key",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":445,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateUserDto.html":{}}}],["isemail",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismanager",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":446,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["isoptional",{"_index":447,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":448,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["isstring()@isoptional",{"_index":440,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{}}}],["isstrongpassword",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["j",{"_index":281,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["join",{"_index":728,"title":{},"body":{"index.html":{}}}],["jwtconstants",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":736,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lib/prisma",{"_index":553,"title":{},"body":{"injectables/PrismaService.html":{}}}],["license",{"_index":742,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":718,"title":{},"body":{"index.html":{}}}],["limit",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["lista",{"_index":288,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["listadas",{"_index":360,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["listadas'})@apibadrequestresponse({status",{"_index":503,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["listadas'})@apinotfoundresponse({status",{"_index":306,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["listados",{"_index":356,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["listados'})@apibadrequestresponse({status",{"_index":300,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["listagem",{"_index":296,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["logado",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["login'})@apiokresponse({description",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["ltimo",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mail",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["main",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matemática",{"_index":461,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["matemática'})@isstring()@isnotempty",{"_index":457,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["matéria",{"_index":456,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["mesma",{"_index":368,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["mesma'})@apiokresponse({status",{"_index":316,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["mesmo",{"_index":279,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["mesmo'})@apiokresponse({status",{"_index":592,"title":{},"body":{"controllers/UserController.html":{}}}],["message",{"_index":562,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["metadata",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":680,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":717,"title":{},"body":{"index.html":{}}}],["mode",{"_index":707,"title":{},"body":{"index.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/content/content.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/discipline/discipline.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/dto/singin",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["modules/user/user.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules/user/user.service",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":731,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":737,"title":{},"body":{"index.html":{}}}],["na",{"_index":274,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["name",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":695,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":741,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ContentController.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":687,"title":{},"body":{"index.html":{}}}],["nome",{"_index":280,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["nome'})@apiokresponse({status",{"_index":305,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["notfoundexception",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('conteúdo",{"_index":405,"title":{},"body":{"injectables/ContentService.html":{}}}],["notfoundexception('disciplina",{"_index":543,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["notfoundexception('usuário",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":700,"title":{},"body":{"index.html":{}}}],["number",{"_index":287,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["não",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nível",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["o",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["object",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onmoduleinit",{"_index":551,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":719,"title":{},"body":{"index.html":{}}}],["optional",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["os",{"_index":290,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["out",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":746,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":662,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":294,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param",{"_index":329,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["param('name",{"_index":366,"title":{},"body":{"controllers/ContentController.html":{}}}],["param('username",{"_index":607,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":571,"title":{},"body":{"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcontentdto",{"_index":570,"title":{},"body":{"classes/UpdateContentDto.html":{}}}],["partialtype(createdisciplinedto",{"_index":573,"title":{},"body":{"classes/UpdateDisciplineDto.html":{}}}],["partialtype(createuserdto",{"_index":576,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["passar",{"_index":315,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["password",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":330,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["patch('update/:name",{"_index":365,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["patch('update/:username",{"_index":606,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["pedro",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pedro'})@isstring()@isnotempty",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pedro1234",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["pedro1234!'})@isstrongpassword()@isnotempty",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["pedroosilvaa",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["pedroosilvaa'})@isstring()@isnotempty",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["pedrosilva@exemplo.com",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pedrosilva@exemplo.com'})@isemail()@isnotempty",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["perfil",{"_index":323,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["plataforma",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["plataforma'})@apicreatedresponse({status",{"_index":275,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["plataforma'})@apiokresponse({description",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["please",{"_index":729,"title":{},"body":{"index.html":{}}}],["por",{"_index":292,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["post",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["post('create",{"_index":351,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["prettier/prettier",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["primeiro",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prisma",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma/.../seed.ts",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["prisma/seed.ts",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":550,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":217,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["production",{"_index":709,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":686,"title":{},"body":{"index.html":{}}}],["project",{"_index":720,"title":{},"body":{"index.html":{}}}],["promise",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":411,"title":{"properties.html":{}},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"properties.html":{}}}],["proporção",{"_index":422,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["proporção'})@isstring()@isnotempty",{"_index":442,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["provide",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@httpcode(httpstatus.ok)@post('login')@apioperation({summary",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('create')@apioperation({summary",{"_index":582,"title":{},"body":{"controllers/UserController.html":{}}}],["página",{"_index":295,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["página'})@apiparam({name",{"_index":293,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["que",{"_index":427,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["razão",{"_index":420,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["read",{"_index":730,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["realiza",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["recebido",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{}}}],["remove",{"_index":267,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('name",{"_index":371,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["remove(@param('username",{"_index":610,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(name",{"_index":312,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["remove(username",{"_index":591,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removida",{"_index":523,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["removida'})@apinotfoundresponse({status",{"_index":508,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["removido",{"_index":369,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["removido'})@apinotfoundresponse({status",{"_index":317,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["repository",{"_index":698,"title":{},"body":{"index.html":{}}}],["req",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.email",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.firstname",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.id",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.lastname",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.password",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.username",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"classes/SwaggerBadRequestResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["request.headers.authorization?.split",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":210,"title":{},"body":{"guards/AuthGuard.html":{}}}],["required",{"_index":430,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["requisição",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":339,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["response.ts",{"_index":560,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"coverage.html":{}}}],["response.ts:10",{"_index":566,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["response.ts:6",{"_index":565,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["response.ts:8",{"_index":564,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["results",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":704,"title":{},"body":{"index.html":{}}}],["running",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":691,"title":{},"body":{"index.html":{}}}],["schema",{"_index":298,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["secret",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":400,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["senha",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["server",{"_index":692,"title":{},"body":{"index.html":{}}}],["service",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["setmetadata(is_public_key",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":693,"title":{},"body":{"index.html":{}}}],["signin",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(username",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["signindto",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto.password",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["silva",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["silva'})@isstring()@isnotempty",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["singinuserdto",{"_index":118,"title":{"classes/SingInUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SingInUserDto.html":{},"coverage.html":{}}}],["sistema",{"_index":313,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["situações",{"_index":426,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["skip",{"_index":403,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Content.html":{},"controllers/ContentController.html":{},"modules/ContentModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/Discipline.html":{},"controllers/DisciplineController.html":{},"modules/DisciplineModule.html":{},"injectables/DisciplineService.html":{},"injectables/PrismaService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"classes/UpdateContentDto.html":{},"classes/UpdateDisciplineDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":723,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.ts",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:14",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:17",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:42",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":653,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/prismaservice.ts",{"_index":548,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/database/prismaservice.ts:7",{"_index":552,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/lib/prisma.ts",{"_index":655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/content/content.controller.ts",{"_index":263,"title":{},"body":{"controllers/ContentController.html":{},"coverage.html":{}}}],["src/modules/content/content.controller.ts:124",{"_index":327,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/modules/content/content.controller.ts:147",{"_index":319,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/modules/content/content.controller.ts:51",{"_index":285,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/modules/content/content.controller.ts:71",{"_index":302,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/modules/content/content.controller.ts:95",{"_index":311,"title":{},"body":{"controllers/ContentController.html":{}}}],["src/modules/content/content.module.ts",{"_index":376,"title":{},"body":{"modules/ContentModule.html":{}}}],["src/modules/content/content.service.ts",{"_index":378,"title":{},"body":{"injectables/ContentService.html":{},"coverage.html":{}}}],["src/modules/content/content.service.ts:118",{"_index":384,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/content.service.ts:12",{"_index":380,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/content.service.ts:15",{"_index":381,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/content.service.ts:45",{"_index":382,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/content.service.ts:73",{"_index":383,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/content.service.ts:97",{"_index":385,"title":{},"body":{"injectables/ContentService.html":{}}}],["src/modules/content/dto/create",{"_index":409,"title":{},"body":{"classes/CreateContentDto.html":{},"coverage.html":{}}}],["src/modules/content/dto/update",{"_index":569,"title":{},"body":{"classes/UpdateContentDto.html":{},"coverage.html":{}}}],["src/modules/content/entities/content.entity.ts",{"_index":261,"title":{},"body":{"classes/Content.html":{},"coverage.html":{}}}],["src/modules/discipline/discipline.controller.ts",{"_index":495,"title":{},"body":{"controllers/DisciplineController.html":{},"coverage.html":{}}}],["src/modules/discipline/discipline.controller.ts:101",{"_index":511,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["src/modules/discipline/discipline.controller.ts:122",{"_index":509,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["src/modules/discipline/discipline.controller.ts:33",{"_index":499,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["src/modules/discipline/discipline.controller.ts:49",{"_index":504,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["src/modules/discipline/discipline.controller.ts:73",{"_index":507,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["src/modules/discipline/discipline.module.ts",{"_index":528,"title":{},"body":{"modules/DisciplineModule.html":{}}}],["src/modules/discipline/discipline.service.ts",{"_index":530,"title":{},"body":{"injectables/DisciplineService.html":{},"coverage.html":{}}}],["src/modules/discipline/discipline.service.ts:12",{"_index":531,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/discipline.service.ts:120",{"_index":536,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/discipline.service.ts:15",{"_index":532,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/discipline.service.ts:153",{"_index":535,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/discipline.service.ts:45",{"_index":533,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/discipline.service.ts:91",{"_index":534,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["src/modules/discipline/dto/create",{"_index":452,"title":{},"body":{"classes/CreateDisciplineDto.html":{},"coverage.html":{}}}],["src/modules/discipline/dto/update",{"_index":572,"title":{},"body":{"classes/UpdateDisciplineDto.html":{},"coverage.html":{}}}],["src/modules/discipline/entities/discipline.entity.ts",{"_index":493,"title":{},"body":{"classes/Discipline.html":{},"coverage.html":{}}}],["src/modules/helpers/bad",{"_index":559,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"coverage.html":{}}}],["src/modules/helpers/conflict",{"_index":567,"title":{},"body":{"classes/SwaggerConflictResponse.html":{},"coverage.html":{}}}],["src/modules/helpers/not",{"_index":568,"title":{},"body":{"classes/SwaggerNotFoundResponse.html":{},"coverage.html":{}}}],["src/modules/user/dto/create",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/singin",{"_index":555,"title":{},"body":{"classes/SingInUserDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/update",{"_index":575,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":578,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts",{"_index":580,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:126",{"_index":597,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:149",{"_index":594,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:53",{"_index":584,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:73",{"_index":586,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:97",{"_index":590,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":615,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":617,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:104",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:13",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:136",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:16",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:163",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:181",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:52",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":705,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":708,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":710,"title":{},"body":{"index.html":{}}}],["started",{"_index":685,"title":{"index.html":{}},"body":{}}],["starter",{"_index":697,"title":{},"body":{"index.html":{}}}],["statements",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"classes/CreateContentDto.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["statuscode",{"_index":563,"title":{},"body":{"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{}}}],["stay",{"_index":733,"title":{},"body":{"index.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sucesso",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":724,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":744,"title":{},"body":{"modules.html":{}}}],["swaggerbadrequestresponse",{"_index":337,"title":{"classes/SwaggerBadRequestResponse.html":{}},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"classes/SwaggerBadRequestResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["swaggerbadrequestresponse})@delete('remove/:name",{"_index":318,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["swaggerbadrequestresponse})@delete('remove/:username",{"_index":593,"title":{},"body":{"controllers/UserController.html":{}}}],["swaggerbadrequestresponse})@get('/:name",{"_index":310,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["swaggerbadrequestresponse})@get('/:username",{"_index":589,"title":{},"body":{"controllers/UserController.html":{}}}],["swaggerbadrequestresponse})@get('findall/:page",{"_index":301,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["swaggerbadrequestresponse})@patch('update/:name",{"_index":326,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["swaggerbadrequestresponse})@patch('update/:username",{"_index":596,"title":{},"body":{"controllers/UserController.html":{}}}],["swaggerbadrequestresponse})@post('create",{"_index":284,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{}}}],["swaggerconflictresponse",{"_index":340,"title":{"classes/SwaggerConflictResponse.html":{}},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"classes/SwaggerConflictResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["swaggerconflictresponse})@apibadrequestresponse({status",{"_index":283,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["swaggernotfoundresponse",{"_index":342,"title":{"classes/SwaggerNotFoundResponse.html":{}},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["swaggernotfoundresponse})@apibadrequestresponse({status",{"_index":309,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["swaggernotfoundresponse})@apiconflictresponse({status",{"_index":325,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["são",{"_index":423,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["table",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":401,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["test",{"_index":713,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":716,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":715,"title":{},"body":{"index.html":{}}}],["tests",{"_index":712,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":722,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":554,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.checkhealth",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto.username",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.contentservice.create(createcontentdto",{"_index":353,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.contentservice.findall(page",{"_index":359,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.contentservice.findone(name",{"_index":363,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.contentservice.remove(name",{"_index":372,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.contentservice.update(name",{"_index":367,"title":{},"body":{"controllers/ContentController.html":{}}}],["this.disciplineservice.create(createdisciplinedto",{"_index":518,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["this.disciplineservice.findall(page",{"_index":519,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["this.disciplineservice.findone(name",{"_index":520,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["this.disciplineservice.remove(name",{"_index":524,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["this.disciplineservice.update(name",{"_index":522,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["this.extracttokenfromheader(request",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.jwtservice.signasync(payload",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.prisma.content.create",{"_index":396,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.content.delete",{"_index":408,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.content.findfirst",{"_index":388,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.content.findmany",{"_index":399,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.content.findunique",{"_index":404,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.content.update",{"_index":407,"title":{},"body":{"injectables/ContentService.html":{}}}],["this.prisma.discipline.create",{"_index":541,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["this.prisma.discipline.delete",{"_index":547,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["this.prisma.discipline.findfirst",{"_index":537,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["this.prisma.discipline.findmany",{"_index":542,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["this.prisma.discipline.findunique",{"_index":391,"title":{},"body":{"injectables/ContentService.html":{},"injectables/DisciplineService.html":{}}}],["this.prisma.discipline.update",{"_index":546,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["this.prisma.user.create",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.delete",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findfirst",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.findmany",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":539,"title":{},"body":{"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.userservice.create(createuserdto",{"_index":601,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(page",{"_index":602,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findinfos(username",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(username",{"_index":605,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(username",{"_index":611,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(username",{"_index":608,"title":{},"body":{"controllers/UserController.html":{}}}],["throttlermodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["todas",{"_index":500,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["todos",{"_index":289,"title":{},"body":{"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["token",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["touch",{"_index":734,"title":{},"body":{"index.html":{}}}],["true",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty",{"_index":438,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{}}}],["try",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ttl",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":740,"title":{},"body":{"index.html":{}}}],["type",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/SingInUserDto.html":{},"classes/SwaggerBadRequestResponse.html":{},"classes/SwaggerConflictResponse.html":{},"classes/SwaggerNotFoundResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":696,"title":{},"body":{"index.html":{}}}],["um",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContentController.html":{},"controllers/UserController.html":{}}}],["uma",{"_index":497,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["unauthorizedexception",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception('senha",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined})@apiokresponse({status",{"_index":299,"title":{},"body":{"controllers/ContentController.html":{},"controllers/DisciplineController.html":{},"controllers/UserController.html":{}}}],["unit",{"_index":711,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ContentService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":752,"title":{},"body":{"properties.html":{}}}],["up",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["update",{"_index":268,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('name",{"_index":521,"title":{},"body":{"controllers/DisciplineController.html":{}}}],["update(name",{"_index":320,"title":{},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{}}}],["update(username",{"_index":595,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatecontentdto",{"_index":321,"title":{"classes/UpdateContentDto.html":{}},"body":{"controllers/ContentController.html":{},"injectables/ContentService.html":{},"classes/UpdateContentDto.html":{},"coverage.html":{}}}],["updatecontentdto.disciplineid",{"_index":406,"title":{},"body":{"injectables/ContentService.html":{}}}],["updatedisciplinedto",{"_index":510,"title":{"classes/UpdateDisciplineDto.html":{}},"body":{"controllers/DisciplineController.html":{},"injectables/DisciplineService.html":{},"classes/UpdateDisciplineDto.html":{},"coverage.html":{}}}],["updatedisciplinedto.name",{"_index":545,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["updatedisciplinedto.userid",{"_index":544,"title":{},"body":{"injectables/DisciplineService.html":{}}}],["updateuserdto",{"_index":574,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.username",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["useclass",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":144,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SingInUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":616,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":577,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":598,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":579,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userexists",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DisciplineService.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":454,"title":{},"body":{"classes/CreateDisciplineDto.html":{}}}],["usermodule",{"_index":51,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["username'})@apiokresponse({status",{"_index":588,"title":{},"body":{"controllers/UserController.html":{}}}],["username/e",{"_index":583,"title":{},"body":{"controllers/UserController.html":{}}}],["usernameexists",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":233,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usuário",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"injectables/DisciplineService.html":{},"classes/SingInUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usuários",{"_index":585,"title":{},"body":{"controllers/UserController.html":{}}}],["utilizadas",{"_index":424,"title":{},"body":{"classes/CreateContentDto.html":{}}}],["validator",{"_index":449,"title":{},"body":{"classes/CreateContentDto.html":{},"classes/CreateDisciplineDto.html":{},"classes/CreateUserDto.html":{},"classes/SingInUserDto.html":{}}}],["value",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":753,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":750,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":706,"title":{},"body":{"index.html":{}}}],["website",{"_index":738,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":727,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContentModule.html":{},"modules/DisciplineModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        checkHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiExcludeEndpoint()@Public()@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './auth/decorators/public.decorator';\nimport { ApiExcludeEndpoint } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiExcludeEndpoint()\n  @Public()\n  @Get()\n  checkHealth(): string {\n    return this.appService.checkHealth();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContentModule\n\nContentModule\n\nAppModule -->\n\nContentModule->AppModule\n\n\n\n\n\nDisciplineModule\n\nDisciplineModule\n\nAppModule -->\n\nDisciplineModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContentModule\n                        \n                        \n                            DisciplineModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './modules/user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { DisciplineModule } from './modules/discipline/discipline.module';\nimport { ContentModule } from './modules/content/content.module';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    AuthModule,\n    UserModule,\n    DisciplineModule,\n    ContentModule,\n    ThrottlerModule.forRoot([\n      {\n        ttl: 60000,\n        limit: 10,\n      },\n    ]),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkHealth\n                        \n                    \n                \n            \n            \n                \ncheckHealth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  checkHealth(): string {\n    return 'Service is up and running!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Acessa as informações de um usuário', description: 'Acessa as informações de um usuário com base no Bearer Token recebido no login'})@ApiOkResponse({description: 'Informações encontradas', status: 200})@ApiBadRequestResponse({description: 'Requisição inválida', status: 400})@ApiUnauthorizedResponse({description: 'Acesso não autorizado', status: 401})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: any; firstName: any; lastName: any; username: any; email: any; password: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SingInUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@Post('login')@ApiOperation({summary: 'Realiza o login de um usuário', description: 'Realiza o login de um usuário plataforma'})@ApiOkResponse({description: 'Usuário logado com sucesso', status: 200})@ApiBadRequestResponse({description: 'Requisição inválida', status: 400})@ApiUnauthorizedResponse({description: 'Acesso não autorizado', status: 401})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SingInUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators/public.decorator';\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags, ApiUnauthorizedResponse } from '@nestjs/swagger';\nimport { SingInUserDto } from '../modules/user/dto/singIn-user-dto';\n\n@ApiBearerAuth()\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) { }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  @ApiOperation({\n    summary: 'Realiza o login de um usuário',\n    description: 'Realiza o login de um usuário plataforma',\n  })\n  @ApiOkResponse({ description: 'Usuário logado com sucesso', status: 200 })\n  @ApiBadRequestResponse({ description: 'Requisição inválida', status: 400 })\n  @ApiUnauthorizedResponse({ description: 'Acesso não autorizado', status: 401 })\n  signIn(@Body() signInDto: SingInUserDto) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n\n  @Get('profile')\n  @ApiOperation({\n    summary: 'Acessa as informações de um usuário',\n    description: 'Acessa as informações de um usuário com base no Bearer Token recebido no login',\n  })\n  @ApiOkResponse({ description: 'Informações encontradas', status: 200 })\n  @ApiBadRequestResponse({ description: 'Requisição inválida', status: 400 })\n  @ApiUnauthorizedResponse({ description: 'Acesso não autorizado', status: 401 })\n  getProfile(@Request() req) {\n    const user = {\n      id: req.user.id,\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      username: req.user.username,\n      email: req.user.email,\n      password: req.user.password,\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { jwtConstants } from './constants';\nimport { IS_PUBLIC_KEY } from './decorators/public.decorator';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UserModule } from '../modules/user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\nimport { jwtConstants } from './constants';\nimport { PrismaService } from '../database/PrismaService';\n\n@Module({\n  imports: [\n    UserModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [\n    AuthService,\n    PrismaService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '../modules/user/user.service';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from '../database/PrismaService';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n    private prisma: PrismaService,\n  ) {}\n\n  async signIn(username: string, pass: string) {\n    const user = await this.userService.findInfos(username);\n\n    const userExists = await this.prisma.user.findFirst({\n      where: {\n        username: username,\n      },\n    });\n\n    if (!userExists) {\n      throw new NotFoundException('Usuário não existente');\n    }\n\n    const isMatch = await bcrypt.compare(pass, user.password);\n\n    if (isMatch) {\n      const payload = {\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        username: user.username,\n        email: user.email,\n        password: pass,\n      };\n      return await this.jwtService.signAsync(payload);\n    } else {\n      throw new UnauthorizedException('Senha incorreta');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Content.html":{"url":"classes/Content.html","title":"class - Content","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Content\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/content/entities/content.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Content {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContentController.html":{"url":"controllers/ContentController.html","title":"controller - ContentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/content/content.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                content\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createContentDto: CreateContentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Cria um conteúdo', description: 'Cria um conteúdo na plataforma'})@ApiCreatedResponse({status: 201, description: 'Conteúdo criado'})@ApiConflictResponse({status: 409, description: 'Conteúdo com mesmo nome já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/content/content.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createContentDto\n                                            \n                                                            CreateContentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista todos os conteúdos', description: 'Lista todos os conteúdos por página'})@ApiParam({name: 'page', description: 'Página de listagem dos conteúdos', schema: undefined})@ApiOkResponse({status: 200, description: 'Conteúdos listados'})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('findAll/:page')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/content/content.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista um conteúdo específico', description: 'Lista as informações de um conteúdo específico com base no nome'})@ApiOkResponse({status: 200, description: 'Informações do conteúdo listadas'})@ApiNotFoundResponse({status: 404, description: 'Conteúdo não encontrado', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/content/content.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove um conteúdo', description: 'Remove um conteúdo do sistema ao passar o nome do mesma'})@ApiOkResponse({status: 200, description: 'Conteúdo removido'})@ApiNotFoundResponse({status: 404, description: 'Conteúdo não encontrado', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Delete('remove/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/content/content.controller.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(name: string, updateContentDto: UpdateContentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Atualiza as informações de um Conteúdo', description: 'Atualiza as informações do perfil do conteúdo com base no nome'})@ApiOkResponse({status: 200, description: 'Informações do conteúdo atualizadas'})@ApiNotFoundResponse({status: 404, description: 'Conteúdo não encontrado', type: SwaggerNotFoundResponse})@ApiConflictResponse({status: 409, description: 'Conteúdo com mesmo nome já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Patch('update/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/content/content.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateContentDto\n                                            \n                                                            UpdateContentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { ContentService } from './content.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { SwaggerBadRequestResponse } from '../helpers/bad-request-response';\nimport { SwaggerConflictResponse } from '../helpers/conflict-response';\nimport { SwaggerNotFoundResponse } from '../helpers/not-found-response';\nimport { CreateContentDto } from './dto/create-content.dto';\nimport { UpdateContentDto } from './dto/update-content.dto';\n\n@ApiBearerAuth()\n@ApiTags('Conteúdo')\n@Controller('content')\nexport class ContentController {\n  constructor(private readonly contentService: ContentService) {}\n\n  @ApiOperation({\n    summary: 'Cria um conteúdo',\n    description: 'Cria um conteúdo na plataforma',\n  })\n  @ApiCreatedResponse({ status: 201, description: 'Conteúdo criado' })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Conteúdo com mesmo nome já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Post('create')\n  create(@Body() createContentDto: CreateContentDto) {\n    return this.contentService.create(createContentDto);\n  }\n\n  @ApiOperation({\n    summary: 'Lista todos os conteúdos',\n    description: 'Lista todos os conteúdos por página',\n  })\n  @ApiParam({\n    name: 'page',\n    description: 'Página de listagem dos conteúdos',\n    schema: { default: 1 },\n  })\n  @ApiOkResponse({ status: 200, description: 'Conteúdos listados' })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('findAll/:page')\n  findAll(@Param('page') page: number) {\n    return this.contentService.findAll(page);\n  }\n\n  @ApiOperation({\n    summary: 'Lista um conteúdo específico',\n    description:\n      'Lista as informações de um conteúdo específico com base no nome',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações do conteúdo listadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Conteúdo não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('/:name')\n  findOne(@Param('name') name: string) {\n    return this.contentService.findOne(name);\n  }\n\n  @ApiOperation({\n    summary: 'Atualiza as informações de um Conteúdo',\n    description:\n      'Atualiza as informações do perfil do conteúdo com base no nome',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações do conteúdo atualizadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Conteúdo não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Conteúdo com mesmo nome já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Patch('update/:name')\n  update(\n    @Param('name') name: string,\n    @Body() updateContentDto: UpdateContentDto,\n  ) {\n    return this.contentService.update(name, updateContentDto);\n  }\n\n  @ApiOperation({\n    summary: 'Remove um conteúdo',\n    description: 'Remove um conteúdo do sistema ao passar o nome do mesma',\n  })\n  @ApiOkResponse({ status: 200, description: 'Conteúdo removido' })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Conteúdo não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Delete('remove/:name')\n  remove(@Param('name') name: string) {\n    return this.contentService.remove(name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContentModule.html":{"url":"modules/ContentModule.html","title":"module - ContentModule","body":"\n                   \n\n\n\n\n    Modules\n    ContentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ContentModule\n\n\n\ncluster_ContentModule_exports\n\n\n\ncluster_ContentModule_providers\n\n\n\n\nContentService \n\nContentService \n\n\n\nContentModule\n\nContentModule\n\nContentService  -->\n\nContentModule->ContentService \n\n\n\n\n\nContentService\n\nContentService\n\nContentModule -->\n\nContentService->ContentModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nContentModule -->\n\nPrismaService->ContentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/content/content.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContentService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ContentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { PrismaService } from '../../database/PrismaService';\nimport { ContentService } from './content.service';\nimport { ContentController } from './content.controller';\n\n@Module({\n  providers: [ContentService, PrismaService],\n  exports: [ContentService],\n  controllers: [ContentController],\n})\nexport class ContentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContentService.html":{"url":"injectables/ContentService.html","title":"injectable - ContentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/content/content.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/content/content.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createContentDto: CreateContentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/content/content.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createContentDto\n                                            \n                                                            CreateContentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/content/content.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/content/content.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/content/content.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(name: string, updateContentDto: UpdateContentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/content/content.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateContentDto\n                                            \n                                                            UpdateContentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../database/PrismaService';\nimport { CreateContentDto } from './dto/create-content.dto';\nimport { UpdateContentDto } from './dto/update-content.dto';\n\n@Injectable()\nexport class ContentService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createContentDto: CreateContentDto) {\n    const contentExists = await this.prisma.content.findFirst({\n      where: {\n        name: createContentDto.name,\n      },\n    });\n\n    if (contentExists) {\n      throw new ConflictException(\n        `Conteúdo com o nome '${createContentDto.name}' já existe`,\n      );\n    }\n\n    const disciplineExists = await this.prisma.discipline.findUnique({\n      where: {\n        id: createContentDto.disciplineId,\n      },\n    });\n\n    if (!disciplineExists) {\n      throw new ConflictException('Id da disciplina não existe');\n    }\n\n    await this.prisma.content.create({\n      data: {\n        ...createContentDto,\n      },\n    });\n  }\n\n  findAll(page: number) {\n    if (page == 0) {\n      return this.prisma.content.findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n      });\n    } else if (page == 1) {\n      return this.prisma.content.findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n        take: 20,\n      });\n    } else {\n      return this.prisma.content.findMany({\n        select: {\n          id: true,\n          name: true,\n        },\n        take: 20,\n        skip: (page - 1) * 20,\n      });\n    }\n  }\n\n  async findOne(name: string) {\n    const content = await this.prisma.content.findUnique({\n      where: {\n        name,\n      },\n      select: {\n        id: true,\n        name: true,\n      },\n    });\n\n    const contentExists = await this.prisma.content.findUnique({\n      where: {\n        name: name,\n      },\n    });\n\n    if (!contentExists) {\n      throw new NotFoundException('Conteúdo não existe');\n    }\n\n    return content;\n  }\n\n  async update(name: string, updateContentDto: UpdateContentDto) {\n    const disciplineExists = await this.prisma.discipline.findUnique({\n      where: {\n        id: updateContentDto.disciplineId,\n      },\n    });\n\n    if (!disciplineExists) {\n      throw new ConflictException('Id da disciplina não existe');\n    }\n\n    return await this.prisma.content.update({\n      data: {\n        ...updateContentDto,\n      },\n      where: {\n        name,\n      },\n    });\n  }\n\n  async remove(name: string) {\n    const contentExists = await this.prisma.content.findUnique({\n      where: {\n        name,\n      },\n    });\n\n    if (!contentExists) {\n      throw new NotFoundException('Conteúdo não existe');\n    }\n\n    await this.prisma.content.delete({\n      where: {\n        name,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateContentDto.html":{"url":"classes/CreateContentDto.html","title":"class - CreateContentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateContentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/content/dto/create-content.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                completed\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                disciplineId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        completed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status do conteúdo', type: Boolean, example: true, default: false})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/content/dto/create-content.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Descrição do conteúdo', type: String, example: 'Razão e proporção são utilizadas em situações que envolvem grandezas...', required: false})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/content/dto/create-content.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        disciplineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Id da disciplina', type: String, example: 'd5d7318e-442c-11ee-be56-0242ac120002', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/content/dto/create-content.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/content/dto/create-content.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nome do conteúdo', type: String, required: true, example: 'Razão e proporção'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/content/dto/create-content.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateContentDto {\n  @IsString()\n  @IsOptional()\n  id?: string;\n\n  @ApiProperty({\n    description: 'Nome do conteúdo',\n    type: String,\n    required: true,\n    example: 'Razão e proporção',\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Descrição do conteúdo',\n    type: String,\n    example:\n      'Razão e proporção são utilizadas em situações que envolvem grandezas...',\n    required: false,\n  })\n  @IsString()\n  description: string;\n\n  @ApiProperty({\n    description: 'Status do conteúdo',\n    type: Boolean,\n    example: true,\n    default: false,\n  })\n  @IsBoolean()\n  @IsNotEmpty()\n  completed: boolean;\n\n  @ApiProperty({\n    description: 'Id da disciplina',\n    type: String,\n    example: 'd5d7318e-442c-11ee-be56-0242ac120002',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  disciplineId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDisciplineDto.html":{"url":"classes/CreateDisciplineDto.html","title":"class - CreateDisciplineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDisciplineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/discipline/dto/create-discipline.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/discipline/dto/create-discipline.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nome da matéria', type: String, example: 'Matemática'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/discipline/dto/create-discipline.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Id do usuário do hábito', type: String, example: 'd5d7318e-442c-11ee-be56-0242ac120002', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/discipline/dto/create-discipline.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class CreateDisciplineDto {\n    @IsString()\n    @IsOptional()\n    id?: string;\n\n    @ApiProperty({ description: 'Nome da matéria', type: String, example: 'Matemática' })\n    @IsString()\n    @IsNotEmpty()\n    name: string;\n\n    @ApiProperty({ description: 'Id do usuário do hábito', type: String, example: 'd5d7318e-442c-11ee-be56-0242ac120002', required: true })\n    @IsString()\n    @IsNotEmpty()\n    userId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                isManager\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'E-mail do usuário', type: String, example: 'pedrosilva@exemplo.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Primeiro nome do usuário', type: String, example: 'Pedro'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        isManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nível de acesso do usuário', type: Boolean, example: false, default: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Último nome do usuário', type: String, example: 'Silva'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Senha do usuário', type: String, example: 'Pedro1234!'})@IsStrongPassword()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Apelido do usuário', type: String, example: 'PedrooSilvaa'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsEmail, IsNotEmpty, IsOptional, IsString, IsStrongPassword } from 'class-validator';\n\nexport class CreateUserDto {\n    @IsString()\n    @IsOptional()\n    id?: string;\n\n    @ApiProperty({ description: 'Primeiro nome do usuário', type: String, example: 'Pedro' })\n    @IsString()\n    @IsNotEmpty()\n    firstName: string;\n\n    @ApiProperty({ description: 'Último nome do usuário', type: String, example: 'Silva' })\n    @IsString()\n    @IsNotEmpty()\n    lastName: string;\n\n    @ApiProperty({ description: 'Apelido do usuário', type: String, example: 'PedrooSilvaa' })\n    @IsString()\n    @IsNotEmpty()\n    username: string;\n\n    @ApiProperty({ description: 'E-mail do usuário', type: String, example: 'pedrosilva@exemplo.com' })\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @ApiProperty({ description: 'Senha do usuário', type: String, example: 'Pedro1234!' })\n    @IsStrongPassword()\n    @IsNotEmpty()\n    password: string;\n\n    @ApiProperty({ description: 'Nível de acesso do usuário', type: Boolean, example: false, default: false })\n    @IsBoolean()\n    @IsOptional()\n    isManager: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Discipline.html":{"url":"classes/Discipline.html","title":"class - Discipline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Discipline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/discipline/entities/discipline.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Discipline {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisciplineController.html":{"url":"controllers/DisciplineController.html","title":"controller - DisciplineController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DisciplineController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/discipline/discipline.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                discipline\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDisciplineDto: CreateDisciplineDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Cria uma disciplina', description: 'Cria uma disciplina na plataforma'})@ApiCreatedResponse({status: 201, description: 'Disciplina criada'})@ApiConflictResponse({status: 409, description: 'Disciplina com mesmo nome já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDisciplineDto\n                                            \n                                                            CreateDisciplineDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista todas as disciplinas', description: 'Lista todas as disciplinas por página'})@ApiParam({name: 'page', description: 'Página de listagem das disciplinas', schema: undefined})@ApiOkResponse({status: 200, description: 'Disciplinas listadas'})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('findAll/:page')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista uma disciplina específica', description: 'Lista as informações de uma disciplina específica com base no nome'})@ApiOkResponse({status: 200, description: 'Informações da disciplina listadas'})@ApiNotFoundResponse({status: 404, description: 'Disciplina não encontrada', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove uma disciplina', description: 'Remove uma disciplina do sistema ao passar o nome da mesma'})@ApiOkResponse({status: 200, description: 'Disciplina removida'})@ApiNotFoundResponse({status: 404, description: 'Disciplina não encontrada', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Delete('remove/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(name: string, updateDisciplineDto: UpdateDisciplineDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Atualiza as informações de uma disciplina', description: 'Atualiza as informações do perfil da disciplina com base no nome'})@ApiOkResponse({status: 200, description: 'Informações da disciplina atualizadas'})@ApiNotFoundResponse({status: 404, description: 'Disciplina não encontrada', type: SwaggerNotFoundResponse})@ApiConflictResponse({status: 409, description: 'Disciplina com mesmo nome já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Patch('update/:name')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDisciplineDto\n                                            \n                                                            UpdateDisciplineDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\nimport { DisciplineService } from './discipline.service';\nimport { ApiBadRequestResponse, ApiBearerAuth, ApiConflictResponse, ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation,  ApiParam,  ApiTags } from '@nestjs/swagger';\nimport { SwaggerBadRequestResponse } from '../helpers/bad-request-response';\nimport { SwaggerConflictResponse } from '../helpers/conflict-response';\nimport { CreateDisciplineDto } from './dto/create-discipline.dto';\nimport { SwaggerNotFoundResponse } from '../helpers/not-found-response';\nimport { UpdateDisciplineDto } from './dto/update-discipline.dto';\n\n@ApiBearerAuth()\n@ApiTags('Disciplina')\n@Controller('discipline')\nexport class DisciplineController {\n  constructor(private readonly disciplineService: DisciplineService) { }\n\n  @ApiOperation({\n    summary: 'Cria uma disciplina',\n    description: 'Cria uma disciplina na plataforma',\n  })\n  @ApiCreatedResponse({ status: 201, description: 'Disciplina criada' })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Disciplina com mesmo nome já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Post('create')\n  create(@Body() createDisciplineDto: CreateDisciplineDto) {\n    return this.disciplineService.create(createDisciplineDto);\n  }\n\n  @ApiOperation({\n    summary: 'Lista todas as disciplinas',\n    description: 'Lista todas as disciplinas por página',\n  })\n  @ApiParam({ name: 'page', description: 'Página de listagem das disciplinas', schema: { default: 1 } })\n  @ApiOkResponse({ status: 200, description: 'Disciplinas listadas' })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('findAll/:page')\n  findAll(@Param('page') page: number) {\n    return this.disciplineService.findAll(page);\n  }\n\n  @ApiOperation({\n    summary: 'Lista uma disciplina específica',\n    description:\n      'Lista as informações de uma disciplina específica com base no nome',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações da disciplina listadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Disciplina não encontrada',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('/:name')\n  findOne(@Param('name') name: string) {\n    return this.disciplineService.findOne(name);\n  }\n\n  @ApiOperation({\n    summary: 'Atualiza as informações de uma disciplina',\n    description: 'Atualiza as informações do perfil da disciplina com base no nome',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações da disciplina atualizadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Disciplina não encontrada',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Disciplina com mesmo nome já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Patch('update/:name')\n  update(@Param('name') name: string, @Body() updateDisciplineDto: UpdateDisciplineDto) {\n    return this.disciplineService.update(name, updateDisciplineDto);\n  }\n\n  @ApiOperation({\n    summary: 'Remove uma disciplina',\n    description:\n      'Remove uma disciplina do sistema ao passar o nome da mesma',\n  })\n  @ApiOkResponse({ status: 200, description: 'Disciplina removida' })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Disciplina não encontrada',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Delete('remove/:name')\n  remove(@Param('name') name: string) {\n    return this.disciplineService.remove(name);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DisciplineModule.html":{"url":"modules/DisciplineModule.html","title":"module - DisciplineModule","body":"\n                   \n\n\n\n\n    Modules\n    DisciplineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DisciplineModule\n\n\n\ncluster_DisciplineModule_exports\n\n\n\ncluster_DisciplineModule_providers\n\n\n\n\nDisciplineService \n\nDisciplineService \n\n\n\nDisciplineModule\n\nDisciplineModule\n\nDisciplineService  -->\n\nDisciplineModule->DisciplineService \n\n\n\n\n\nDisciplineService\n\nDisciplineService\n\nDisciplineModule -->\n\nDisciplineService->DisciplineModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDisciplineModule -->\n\nPrismaService->DisciplineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/discipline/discipline.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DisciplineService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DisciplineController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DisciplineService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { DisciplineService } from './discipline.service';\nimport { DisciplineController } from './discipline.controller';\nimport { PrismaService } from '../../database/PrismaService';\n\n@Module({\n  providers: [DisciplineService, PrismaService],\n  exports: [DisciplineService],\n  controllers: [DisciplineController],\n})\nexport class DisciplineModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisciplineService.html":{"url":"injectables/DisciplineService.html","title":"injectable - DisciplineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisciplineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/discipline/discipline.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/discipline/discipline.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDisciplineDto: CreateDisciplineDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDisciplineDto\n                                            \n                                                            CreateDisciplineDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(name: string, updateDisciplineDto: UpdateDisciplineDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/discipline/discipline.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDisciplineDto\n                                            \n                                                            UpdateDisciplineDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../../database/PrismaService';\nimport { CreateDisciplineDto } from './dto/create-discipline.dto';\nimport { UpdateDisciplineDto } from './dto/update-discipline.dto';\n\n@Injectable()\nexport class DisciplineService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createDisciplineDto: CreateDisciplineDto) {\n    const disciplineExists = await this.prisma.discipline.findFirst({\n      where: {\n        name: createDisciplineDto.name,\n      },\n    });\n\n    if (disciplineExists) {\n      throw new ConflictException(\n        `Disciplina com o nome '${createDisciplineDto.name}' já existe`,\n      );\n    }\n\n    const userExists = await this.prisma.user.findUnique({\n      where: {\n        id: createDisciplineDto.userId,\n      },\n    });\n\n    if (!userExists) {\n      throw new ConflictException('Id do usuário não existe');\n    }\n\n    await this.prisma.discipline.create({\n      data: {\n        ...createDisciplineDto,\n      },\n    });\n  }\n\n  findAll(page: number) {\n    if (page == 0) {\n      return this.prisma.discipline.findMany({\n        select: {\n          id: true,\n          name: true,\n          content: {\n            select: {\n              name: true,\n              description: true,\n            },\n          },\n        },\n      });\n    } else if (page == 1) {\n      return this.prisma.discipline.findMany({\n        select: {\n          id: true,\n          name: true,\n          content: {\n            select: {\n              name: true,\n              description: true,\n            },\n          },\n        },\n        take: 20,\n      });\n    } else {\n      return this.prisma.discipline.findMany({\n        select: {\n          id: true,\n          name: true,\n          content: {\n            select: {\n              name: true,\n              description: true,\n            },\n          },\n        },\n        take: 20,\n        skip: (page - 1) * 20,\n      });\n    }\n  }\n\n  async findOne(name: string) {\n    const discipline = await this.prisma.discipline.findUnique({\n      where: {\n        name,\n      },\n      select: {\n        id: true,\n        name: true,\n        content: {\n          select: {\n            name: true,\n          },\n        },\n      },\n    });\n\n    const disciplineExists = await this.prisma.discipline.findUnique({\n      where: {\n        name: name,\n      },\n    });\n\n    if (!disciplineExists) {\n      throw new NotFoundException('Disciplina não existe');\n    }\n\n    return discipline;\n  }\n\n  async update(name: string, updateDisciplineDto: UpdateDisciplineDto) {\n    const userExists = await this.prisma.user.findUnique({\n      where: {\n        id: updateDisciplineDto.userId,\n      },\n    });\n\n    if (!userExists) {\n      throw new ConflictException('Id do usuário não existe');\n    }\n\n    const disciplineExists = await this.prisma.discipline.findFirst({\n      where: {\n        name: updateDisciplineDto.name,\n      },\n    });\n\n    if (disciplineExists) {\n      throw new ConflictException(\n        `Disciplina com o nome '${updateDisciplineDto.name}' já existe`,\n      );\n    }\n\n    return await this.prisma.discipline.update({\n      data: {\n        ...updateDisciplineDto,\n      },\n      where: {\n        name,\n      },\n    });\n  }\n\n  async remove(name: string) {\n    const disciplineExists = await this.prisma.discipline.findUnique({\n      where: {\n        name,\n      },\n    });\n\n    if (!disciplineExists) {\n      throw new NotFoundException('Disciplina não existe');\n    }\n\n    await this.prisma.discipline.delete({\n      where: {\n        name,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/PrismaService.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/PrismaService.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport PrismaClient from \"../lib/prisma\"\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n    async onModuleInit() {\n        await this.$connect();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SingInUserDto.html":{"url":"classes/SingInUserDto.html","title":"class - SingInUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SingInUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/singIn-user-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Senha do usuário', type: String, example: 'Pedro1234!'})@IsStrongPassword()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/singIn-user-dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Apelido do usuário', type: String, example: 'PedrooSilvaa'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/singIn-user-dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsNotEmpty, IsStrongPassword } from \"class-validator\";\n\nexport class SingInUserDto {\n    @ApiProperty({ description: 'Apelido do usuário', type: String, example: 'PedrooSilvaa' })\n    @IsString()\n    @IsNotEmpty()\n    username: string;\n\n    @ApiProperty({ description: 'Senha do usuário', type: String, example: 'Pedro1234!' })\n    @IsStrongPassword()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SwaggerBadRequestResponse.html":{"url":"classes/SwaggerBadRequestResponse.html","title":"class - SwaggerBadRequestResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SwaggerBadRequestResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/helpers/bad-request-response.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/bad-request-response.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/bad-request-response.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/bad-request-response.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SwaggerBadRequestResponse {\n    @ApiProperty()\n    message: string;\n    @ApiProperty()\n    error: string;\n    @ApiProperty()\n    statusCode: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SwaggerConflictResponse.html":{"url":"classes/SwaggerConflictResponse.html","title":"class - SwaggerConflictResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SwaggerConflictResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/helpers/conflict-response.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/conflict-response.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/conflict-response.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/conflict-response.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SwaggerConflictResponse {\n    @ApiProperty()\n    message: string;\n    @ApiProperty()\n    error: string;\n    @ApiProperty()\n    statusCode: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SwaggerNotFoundResponse.html":{"url":"classes/SwaggerNotFoundResponse.html","title":"class - SwaggerNotFoundResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SwaggerNotFoundResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/helpers/not-found-response.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/not-found-response.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/not-found-response.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/helpers/not-found-response.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SwaggerNotFoundResponse {\n    @ApiProperty()\n    message: string;\n    @ApiProperty()\n    error: string;\n    @ApiProperty()\n    statusCode: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateContentDto.html":{"url":"classes/UpdateContentDto.html","title":"class - UpdateContentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateContentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/content/dto/update-content.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateContentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateContentDto } from './create-content.dto';\n\nexport class UpdateContentDto extends PartialType(CreateContentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDisciplineDto.html":{"url":"classes/UpdateDisciplineDto.html","title":"class - UpdateDisciplineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDisciplineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/discipline/dto/update-discipline.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateDisciplineDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateDisciplineDto } from './create-discipline.dto';\n\nexport class UpdateDisciplineDto extends PartialType(CreateDisciplineDto) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('create')@ApiOperation({summary: 'Cria um usuário', description: 'Cria um usuário na plataforma'})@ApiCreatedResponse({status: 201, description: 'Usuário criado'})@ApiConflictResponse({status: 409, description: 'Usuário com mesmo username/e-mail já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista todos os usuários', description: 'Lista todos os usuários por página'})@ApiParam({name: 'page', description: 'Página de listagem dos usuários', schema: undefined})@ApiOkResponse({status: 200, description: 'Usuários listados'})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('findAll/:page')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Lista um usuário específico', description: 'Lista as informações de um usuário específico com base no username'})@ApiOkResponse({status: 200, description: 'Informações do usuário listadas'})@ApiNotFoundResponse({status: 404, description: 'Usuário não encontrado', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Get('/:username')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove um usuário', description: 'Remove um usuário do sistema ao passar o username do mesmo'})@ApiOkResponse({status: 200, description: 'Usuário removido'})@ApiNotFoundResponse({status: 404, description: 'Usuário não encontrado', type: SwaggerNotFoundResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Delete('remove/:username')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(username: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Atualiza as informações de um usuário', description: 'Atualiza as informações do perfil do usuário com base no username'})@ApiOkResponse({status: 200, description: 'Informações do usuário atualizadas'})@ApiNotFoundResponse({status: 404, description: 'Usuário não encontrado', type: SwaggerNotFoundResponse})@ApiConflictResponse({status: 409, description: 'Usuário com mesmo username já existe', type: SwaggerConflictResponse})@ApiBadRequestResponse({status: 400, description: 'Requisição inválida', type: SwaggerBadRequestResponse})@Patch('update/:username')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { SwaggerConflictResponse } from '../helpers/conflict-response';\nimport { SwaggerBadRequestResponse } from '../helpers/bad-request-response';\nimport { SwaggerNotFoundResponse } from '../helpers/not-found-response';\nimport { Public } from '../../auth/decorators/public.decorator';\n\n@ApiBearerAuth()\n@ApiTags('Usuário')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Public()\n  @Post('create')\n  @ApiOperation({\n    summary: 'Cria um usuário',\n    description: 'Cria um usuário na plataforma',\n  })\n  @ApiCreatedResponse({ status: 201, description: 'Usuário criado' })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Usuário com mesmo username/e-mail já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @ApiOperation({\n    summary: 'Lista todos os usuários',\n    description: 'Lista todos os usuários por página',\n  })\n  @ApiParam({\n    name: 'page',\n    description: 'Página de listagem dos usuários',\n    schema: { default: 1 },\n  })\n  @ApiOkResponse({ status: 200, description: 'Usuários listados' })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('findAll/:page')\n  findAll(@Param('page') page: number) {\n    return this.userService.findAll(page);\n  }\n\n  @ApiOperation({\n    summary: 'Lista um usuário específico',\n    description:\n      'Lista as informações de um usuário específico com base no username',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações do usuário listadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Usuário não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Get('/:username')\n  findOne(@Param('username') username: string) {\n    return this.userService.findOne(username);\n  }\n\n  @ApiOperation({\n    summary: 'Atualiza as informações de um usuário',\n    description:\n      'Atualiza as informações do perfil do usuário com base no username',\n  })\n  @ApiOkResponse({\n    status: 200,\n    description: 'Informações do usuário atualizadas',\n  })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Usuário não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiConflictResponse({\n    status: 409,\n    description: 'Usuário com mesmo username já existe',\n    type: SwaggerConflictResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Patch('update/:username')\n  update(\n    @Param('username') username: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    return this.userService.update(username, updateUserDto);\n  }\n\n  @ApiOperation({\n    summary: 'Remove um usuário',\n    description: 'Remove um usuário do sistema ao passar o username do mesmo',\n  })\n  @ApiOkResponse({ status: 200, description: 'Usuário removido' })\n  @ApiNotFoundResponse({\n    status: 404,\n    description: 'Usuário não encontrado',\n    type: SwaggerNotFoundResponse,\n  })\n  @ApiBadRequestResponse({\n    status: 400,\n    description: 'Requisição inválida',\n    type: SwaggerBadRequestResponse,\n  })\n  @Delete('remove/:username')\n  remove(@Param('username') username: string) {\n    return this.userService.remove(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { PrismaService } from '../../database/PrismaService';\n\n@Module({\n  providers: [UserService, PrismaService],\n  exports: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findInfos\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findInfos\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInfos(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(username: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ConflictException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { PrismaService } from '../../database/PrismaService';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const userExists = await this.prisma.user.findFirst({\n      where: {\n        email: createUserDto.email,\n      },\n    });\n\n    if (userExists) {\n      throw new ConflictException(\n        `Usuário com o e-mail '${createUserDto.email}' já existe`,\n      );\n    }\n\n    const usernameExists = await this.prisma.user.findFirst({\n      where: {\n        username: createUserDto.username,\n      },\n    });\n\n    if (usernameExists) {\n      throw new ConflictException(\n        `Usuário com o username '${createUserDto.username}' já existe`,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hash = await bcrypt.hash(createUserDto.password, salt);\n\n    await this.prisma.user.create({\n      data: {\n        ...createUserDto,\n        password: hash,\n      },\n    });\n  }\n\n  findAll(page: number) {\n    if (page == 0) {\n      return this.prisma.user.findMany({\n        select: {\n          id: true,\n          firstName: true,\n          lastName: true,\n          username: true,\n          email: true,\n          disciplines: {\n            select: {\n              name: true,\n            },\n          },\n        },\n      });\n    } else if (page == 1) {\n      return this.prisma.user.findMany({\n        select: {\n          id: true,\n          firstName: true,\n          lastName: true,\n          username: true,\n          email: true,\n          disciplines: {\n            select: {\n              name: true,\n            },\n          },\n        },\n        take: 20,\n      });\n    } else {\n      return this.prisma.user.findMany({\n        select: {\n          id: true,\n          firstName: true,\n          lastName: true,\n          username: true,\n          email: true,\n          disciplines: {\n            select: {\n              name: true,\n            },\n          },\n        },\n        take: 20,\n        skip: (page - 1) * 20,\n      });\n    }\n  }\n\n  async findOne(username: string) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        username,\n      },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        username: true,\n        email: true,\n        disciplines: {\n          select: {\n            name: true,\n          },\n        },\n      },\n    });\n\n    const userExists = await this.prisma.user.findUnique({\n      where: {\n        username: username,\n      },\n    });\n\n    if (!userExists) {\n      throw new NotFoundException('Usuário não existe');\n    }\n\n    return user;\n  }\n\n  async update(username: string, updateUserDto: UpdateUserDto) {\n    const usernameExists = await this.prisma.user.findFirst({\n      where: {\n        username: updateUserDto.username,\n      },\n    });\n\n    if (usernameExists) {\n      throw new ConflictException(\n        `Usuário com o username '${updateUserDto.username}' já existe`,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hash = await bcrypt.hash(updateUserDto.password, salt);\n\n    return await this.prisma.user.update({\n      data: {\n        ...updateUserDto,\n        password: hash,\n      },\n      where: {\n        username,\n      },\n    });\n  }\n\n  async remove(username: string) {\n    const userExists = await this.prisma.user.findUnique({\n      where: {\n        username,\n      },\n    });\n\n    if (!userExists) {\n      throw new NotFoundException('Usuário não existe');\n    }\n\n    await this.prisma.user.delete({\n      where: {\n        username,\n      },\n    });\n  }\n\n  async findInfos(username: string): Promise {\n    return this.prisma.user.findFirst({\n      where: {\n        username: username,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/PrismaService.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/prisma.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/content/content.controller.ts\n            \n            controller\n            ContentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/content/content.service.ts\n            \n            injectable\n            ContentService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/content/dto/create-content.dto.ts\n            \n            class\n            CreateContentDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/content/dto/update-content.dto.ts\n            \n            class\n            UpdateContentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/content/entities/content.entity.ts\n            \n            class\n            Content\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/discipline/discipline.controller.ts\n            \n            controller\n            DisciplineController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/discipline/discipline.service.ts\n            \n            injectable\n            DisciplineService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/discipline/dto/create-discipline.dto.ts\n            \n            class\n            CreateDisciplineDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/discipline/dto/update-discipline.dto.ts\n            \n            class\n            UpdateDisciplineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/discipline/entities/discipline.entity.ts\n            \n            class\n            Discipline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/helpers/bad-request-response.ts\n            \n            class\n            SwaggerBadRequestResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/helpers/conflict-response.ts\n            \n            class\n            SwaggerConflictResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/helpers/not-found-response.ts\n            \n            class\n            SwaggerNotFoundResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/user/dto/singIn-user-dto.ts\n            \n            class\n            SingInUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.8\n        \n            @nestjs/throttler : ^5.0.1\n        \n            @prisma/client : ^5.2.0\n        \n            archiver : ^6.0.0\n        \n            bcrypt : ^5.1.1\n        \n            helmet : ^7.1.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DisciplineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContentModule\n\n\n\ncluster_ContentModule_exports\n\n\n\ncluster_ContentModule_providers\n\n\n\ncluster_DisciplineModule\n\n\n\ncluster_DisciplineModule_exports\n\n\n\ncluster_DisciplineModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nContentModule\n\nContentModule\n\nAppModule -->\n\nContentModule->AppModule\n\n\n\n\n\nContentService \n\nContentService \n\nContentService  -->\n\nContentModule->ContentService \n\n\n\n\n\nDisciplineModule\n\nDisciplineModule\n\nAppModule -->\n\nDisciplineModule->AppModule\n\n\n\n\n\nDisciplineService \n\nDisciplineService \n\nDisciplineService  -->\n\nDisciplineModule->DisciplineService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nContentModule -->\n\nPrismaService->ContentModule\n\n\n\nDisciplineModule -->\n\nPrismaService->DisciplineModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nContentService\n\nContentService\n\nContentModule -->\n\nContentService->ContentModule\n\n\n\n\n\nDisciplineService\n\nDisciplineService\n\nDisciplineModule -->\n\nDisciplineService->DisciplineModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            prisma   (src/.../prisma.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret:\n    '123',\n}\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/lib/prisma.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
